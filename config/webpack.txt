webpack:{
    decribe:是一种前端资源构建工具，也是静态模块打包器。webpack是构建工具的一种
    chunk：假如index.js为入口文件， 则引入的index.less，等其它依赖文件，形成的叫chunk代码块。
    打包：然后将chunk的各种资源的转换（css-loader，babel-loader等），这个过程叫打包；
    bundle：打包之后， 将打包好的chunk文件输出，输出的文件就叫bundle；
    模块：每一个export导出的都叫模块。

    config:{
        entry:{
            "a":["babel-polyfill", 入口文件1]
            //babel-polyfill 是可以将一些不支持es6语法的浏览器，转换为浏览器接受的语法。
            1.入口文件， 指示webpack以哪个文件为入口起点开始打包，分析构建依赖图。
            2.string or [string]:chunk会被命名为main
            3.object：每个属性的key会是chunk的名称。
            4.如果采用（2）方案， 那么chunk名称会是main开头的。
              如果采用（3）会为每一个key生成名为[key]的chunk文件。
              如果是多页面的话， 推荐使用方案（3）。
            5.源码大概解析：{
                preperdEntry(originEntry, additionalEntries)=>{
                    此函数里是将每一个entry入口文件都与additionalEntries的路径组成一个数组。组合完成所有的入口文件。
                    数组大概结构：[
                        入口文件1 ：[additionalEntries, 入口文件1],
                        入口文件2 ：[additionalEntries, 入口文件2],
                    ]
                    如果开启了hot：true/hotonly，则也会为数组的每一项都添加上hot：true/hotonly相关文件。
                }
            }
        }
        
        output:影响因素{ //只决定入口文件的输出
            output：指示webpack打包后的bundles文件输出到哪里，以及如何命名。
            1.output-filename: 用于initial chunk文件。
            2.output-chunkfilename： 用于non-initial文件。默认值是[id].js;
            [id].js：chunkid
            [name].js
            [contenthash]输出的文件内容的hash值。
    
            3.publicPath: 确保文件资源能够正确的访问在本机下。
        },
        resolve:{
            alias:{
               别名1: path.resolve("__dirname", "要简化引入的文件的路径") 
               path.resolve:会将路径或者路径片段解析为绝对路径，给定的路径序列会从右到左，依次处理，后面的每个path会被追加到前面，(直到构建出绝对路径)。
               无论解析到什么位置，只要是绝对路径，就不在解析剩下的路径片段。
                示例：
                path.resolve('/目录1/目录2', './目录3');
                // 返回: '/目录1/目录2/目录3'

                path.resolve('/目录1/目录2', '/目录3/目录4/');
                // 返回: '/目录3/目录4'

                path.resolve('目录1', '目录2/目录3/', '../目录4/文件.gif');
                // 如果当前工作目录是 /目录A/目录B，
                // 则返回 '/目录A/目录B/目录1/目录2/目录4/文件.gif'

                // 一、当解析路径时， resolve会检查路径是指向文件还是文件夹， 如果路径指向文件：
                // 1.如果文件具有扩展名， 则将直接打包。
                // 2.否则，将使用resolve.extensions选项作为文件扩展名来解析，此选项会告诉解析器在解析中能够
                //   接受那些扩展名（例如：.js, .jsx)
                // 二、如果路径指向一个文件夹， 则进行如下步骤找具有正确扩展名的文件：
                // 1.如果文件夹中包含package.json文件，则会根据resolve.mainFileds配置中的字段顺序查找,
                //    并根据package.json中的符合配置要求的第一个字段来确定文件路径。
                // 2.如果不存在package.json文件或者resolve.mainFields没有返回有效的路径，
                //    则会根据resolve.mainFields配置选项中指定的文件名顺序查找， 看是否在import/require的目录下匹配到一个存在的文件名
                // 3.然后使用resolve.extensions选项，以类似的方式解析文件扩展名。
            },
            extensions：[".js",".jsx"....],//按顺序解析这些后缀名。如果没有，可能会解析报错
            mainFileds：["文件1"," 文件2"]//当从npm库中引入模块时，此选项决定在package.json中使用哪个字段导入模块。
        },
     
        externals：{//打包时排除， 在运行时再去从外部获取。优化性能的一种方案。
            "React": "react",
            "Redux": "redux"....
        },
        devtool: "eval-source-map"||"source-map"||.....,
                        ↓                 ↓
                        ↓           源码且带有.map文件
                    源码，但是不带有.map文件
        plugin：执行一些更广的任务，压缩、优化等
        mode：{
            dev：打包后的bundles存放在浏览器的localhost下，也就是内存中（猜测是session）
            pro：比dev模式多一个压缩文件（体积小，省内存）；打包后的bundles放在dist（暂时起名output.path=“dist”）。
        },
      
        module:{
            loaders://webpack2.x后就已经被移除， 现在推荐使用rules
            rules:[
                //  loader：处理一些webpack不能够解析的文件类型，（webpack只能解析js。json文件）；
                //  loader的执行顺序是左-->右或下-->上。 
                {
                    test: /\.css/,
                    use:["style-loader", "css-loader"]//多个loader时， 使用use，单个就loader就可以。
                    //先将css解析，然后用import导入到bundle里,是将css文件正好到js文件中。
                    //然后将解析好的css文件， 用style-loader放入到html的style标签中。
                },
                {
                    test: /\.css/, //使用MiniCssExtractPlugin代替style-loader
                    use:[MiniCssExtractPlugin.loader, "css-loader"]//多个loader时， 使用use，单个就loader就可以。
                    //先将css解析，然后用import导入到bundle里,是将css文件正好到js文件中。
                    //然后将解析好的css文件， 用style-loader放入到html的style标签中。
                },
                {
                    test: /\.png/,
                    loader: "url-loader",//url-loader可以将图片为url（地址）转换为base64的字符串，能减少请求数，一旦图片过大， 则会自动转换为file-loader.
                    options:{
                        limit : 8*1024,
                        esModule: false, //采用commonJs,因为url-loader默认是es，然后html-loader是commonJS语法，当通过html-loader转换后，url-loader并不能解析， 所以要将url-loader的es改成commonJS
                        name: "[hash:10].[ext]"//ext：原来的文件的扩展名
                        outputPath: "images" //将图片打包后输出到image文件夹下。其他资源也类似
                    }
                    //url-loader依赖于file-loader
                    //但是不能解析html中的img的图片。此时需要html-loader
                },
                {
                    test: /\.png/,
                    loader: "html-loader",负责引入图片，并转换成url-loader能识别的形式。
                }
            ]
        },
        plugins:[
            HTMLWebpackPlugin：{
                管理输出。
                title: "测试脚手架",
                icon: path.resolve(__dirname, "../assets/image/favicon.png"),
                template: pathHtml,
                filename : pathKey+ ".html" //一定要和open的插件的url一样，否则找不到模板，就找不到页面
            },
            CleanWebpackPlugin：{
                作用：清除旧的dist文件。
                webpack会将每次生成的文件放到dist文件中。但他又不会追踪那些文件是实际在项目中用到的。此时cleanWebpackPlugin的作用就出现了。
            },
            MiniCssExtractPlugin: {
                //该插件用于将css文件提取到单独的文件中。他为每一个包含css的js文件创建一个css文件。
                并且使用MiniCssExtractPlugin.loader代替style-loader，最终形式是《link》
            },
        ]
    }，
    src是项目的源代码，采用的是es6。webpack.config.js的配置文件是采用的commonjs；
    __dirname  nodejs的变量，代表当前文件的目录绝对路径。并且配合node的path，可以防止不同的操作系统，文件形式不一样的问题。
    resolve: 帮助webpack从每个require/import语句中，找到需要引入代码到bundle文件中的方法。
             帮助寻找模块绝对路径的库。
    缓存： 每次文件系统访问文件都会被缓存，以便更快触发对同一文件的多个并发或串行请求；
           在watch中， 只有修改过的文件才会被从缓存中移除，如果关闭watch模式，则会在编译前清理缓存。
           若在部署新版本时， 不更改浏览器的文件名， 浏览器可能会以为它没有被解析，就会采用他的缓存版本。
           采用唯一的hash[name][contenthash].js;

    runtime: 和mainfest在浏览器运行过程中， webpack用来连接模块化应用程序所需的所有代码，、；
            runtime包含在模块交互时连接模块所需的加载和解析的逻辑；
            mainfest：以index.html形式打开应用，一些bundle和应用所需的各种资源都需要用某种方式被加载与连接起来。
                      webpack可以通过mainfest追踪到所有的模块到bundle之间的映射。

    模块热更新HMR: compiler---(更新update)--->{
        1.更新后的mainfest（josn）
        2.一个或多个updated chunk（JS）
        3.适用于生产环境
        4.如果使用了hot或者hotonly，那么不用再使用hotWebapckPlugin插件，因为自动注册了。
    }
    chunk： {
        1.initial（初始化）入口以及依赖项。
        2.non-initial（延迟加载的模块）动态引入或splitChunkPlugin。
            默认情况下。non-initial chunk没有名称，在使用动态导入时，可以使用注释来显示指定的chunk名称
            /*webpackChunName:'哈哈哈哈哈'*/
    }
   
    代码变化后自动编译代码{
        1.webpack watch mode(webpack观察模式)，但是此属性是需要自己手动刷新浏览器，才能看到改变代码后的效果。
        2.webpack-dev-server 的基础是webpack-dev-middleware
        3.webpack-dev-middleware 将编译好的bundle存到内存的实现插件。
    },
    代码分离：{
        入口起点的文件
        splitchunksplugin去重和分离chunk。
        动态引入： 通过模块的内联函数调用分离代码。
        splitchunksplugin:{
            可以将公共的模块提取到已有的入口文件的chunk中，或者提取一个新的生成的chunk
            可以减轻入口文件的大小， 也减少了重复引用导致的提及的问题。
        }
    }
    静态引入： import a from "a.js"
    动态引入：import("a").then(()=>{})
    预获取/预加载: {
        import(/*webpackPreFetch:true*/模块)
        上述代码生成下列形式
        <link rel = "prefetch" href="...bundle.js"/>
        并追加到页面的头部，只是浏览器在渲染时预获取bundle.js里的文件。
        prefetch和preloaded的区别：{
            ·prefetch chunk会在父chunk加载结束开始加载；preloaded chunk会在父加载时，并行加载。
            ·prefetch chunk 在浏览器闲置的时候加载；preloaded chunk具有中等优先级，并立即下载。
            ·prefetch会用于未来某个时刻。preloaded会在父chunk中立即请求，用于当下。
        }
    }
    library:{
        externals：使用它是为了避免将里边的值打包到应用程序中，而是使用者去加载。
        externals：{
            "React": "react",
            "Redux": "redux"....
        }
    }
    webpack是如何将config.js里的参数和webpack自带的默认值联系起来的？{
        1.获取配置文件的值，
        2.然后将process.argv里的参数，与配置合并，返回一个新的配置参数。
        publicPath不存在的时候， 就会取output的publicPath。
    }
    webpack启动后的源码大概逻辑：{
        1.webpack-dev-server读取配置文件， 并且把命令语句合并。
        2.开启startDevServer：在此函数里，创建了compiler = webpack（config）
        3.然后区分单/多配置进行不同的赋予默认值。
        4.导入项目中根据path创建目录，并把打包的chunk存入目录中。
        5.使用webpack时，dist文件会出现在项目中。
          使用webpack-dev-server时， dist不会出现在项目中， 但是是存放在浏览器内存中。
    }
    webpack-dev-server是如何存放到内存里的呢？{
        webpack-dev-middleware是webpack-dev-server的核心技术。
        在webpack-dev-middleware中，调用了fs依赖。fs依赖又调用了memoty-fs
        webpack-dev-middleware → fs → memory-fs
        ↓
        {
            Object.assign({}, defaults, opts)
        }                         ↓
                                {
                                    ...,
                                    writeDisk: false //这个是不写入磁盘。转而采用内存的一个属性。
                                }
        ↓
        startWatch=> if(!options.lazy){compiler.watch();}
        ↓
        将watch监听赋在webpack-dev-middleware的上下文里。
        ↓
        调用fs里的setFs()   
                    ↓
            {
                const isMemoryFs = !context.options.fs
                        ↓           && !compiler.compilers
                                    && compiler.outputFileSystem instanceof mermoryFileSystem
                isMemoryFs是用来判断node.js自己的文件读取系统。
                此字段的意义就是：是不是webpack-dev-middleware的读取内存文件的类。
                不是的话，compiler.outputFileSystem = new MemoryFileSystem();//放到浏览器的对应的location：prot的内存中。
            }                             
        ↓
        memoryFileSystem.mkdirSync()遍历path，放到this.data对象上。
        一个文件层是一个对象。然后把每个bundle.js存放到dist下。
        ↓
        content就变成了buffer文件 = 每一个打包后的文件的对应的文件流
        ↓
        content = context.fs.readFileSync(filename)，然后发送给浏览器。
                                ↓
                                获取回来的就是二进制数据。
    }

    




}